{"version":3,"sources":["logo.svg","modals/CreateTask.js","modals/EditTask.js","components/Card.js","components/TodoList.js","App.js","reportWebVitals.js","index.js"],"names":["CreateTaskPopup","modal","toggle","save","useState","taskName","setTaskName","description","setDescription","handleChange","e","target","name","value","Modal","isOpen","ModalHeader","ModalBody","className","type","onChange","rows","ModalFooter","Button","color","onClick","preventDefault","taskObj","EditTaskPopup","updateTask","useEffect","Name","Description","tempObj","Card","index","deleteTask","updateListArray","setModal","colors","primaryColor","secondaryColor","class","style","EditTask","obj","TodoList","taskList","setTaskList","arr","localStorage","getItem","JSON","parse","tempList","splice","setItem","stringify","window","location","reload","map","CreateTask","push","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fedb4d4d.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { useState } from 'react';\r\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\r\n\r\nconst CreateTaskPopup = ({modal, toggle, save}) => {\r\n    const [taskName, setTaskName] = useState('');\r\n    const [description, setDescription] = useState('');\r\n\r\n    const handleChange = (e) => {\r\n        \r\n        const {name, value} = e.target\r\n\r\n        if(name === \"taskName\"){\r\n            setTaskName(value)\r\n        }else{\r\n            setDescription(value)\r\n        }\r\n\r\n\r\n    }\r\n\r\n    const handleSave = (e) => {\r\n        e.preventDefault()\r\n        let taskObj = {}\r\n        taskObj[\"Name\"] = taskName\r\n        taskObj[\"Description\"] = description\r\n        save(taskObj)\r\n\r\n    }\r\n\r\n    return (\r\n        <Modal isOpen={modal} toggle={toggle}>\r\n            <ModalHeader toggle={toggle}>Create Task</ModalHeader>\r\n            <ModalBody>\r\n            \r\n                    <div className = \"form-group\">\r\n                        <label>Task Name</label>\r\n                        <input type=\"text\" className = \"form-control\" value = {taskName} onChange = {handleChange} name = \"taskName\"/>\r\n                    </div>\r\n                    <div className = \"form-group\">\r\n                        <label>Description</label>\r\n                        <textarea rows = \"5\" className = \"form-control\" value = {description} onChange = {handleChange} name = \"description\"></textarea>\r\n                    </div>\r\n                \r\n            </ModalBody>\r\n            <ModalFooter>\r\n            <Button color=\"primary\" onClick={handleSave}>Create</Button>{' '}\r\n            <Button color=\"secondary\" onClick={toggle}>Cancel</Button>\r\n            </ModalFooter>\r\n      </Modal>\r\n    );\r\n};\r\n\r\nexport default CreateTaskPopup;","import React, { useState , useEffect} from 'react';\r\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\r\n\r\nconst EditTaskPopup = ({modal, toggle, updateTask, taskObj}) => {\r\n    const [taskName, setTaskName] = useState('');\r\n    const [description, setDescription] = useState('');\r\n\r\n    const handleChange = (e) => {\r\n        \r\n        const {name, value} = e.target\r\n\r\n        if(name === \"taskName\"){\r\n            setTaskName(value)\r\n        }else{\r\n            setDescription(value)\r\n        }\r\n\r\n\r\n    }\r\n\r\n    useEffect(() => {\r\n        setTaskName(taskObj.Name)\r\n        setDescription(taskObj.Description)\r\n    },[])\r\n\r\n    const handleUpdate = (e) => {\r\n        e.preventDefault();\r\n        let tempObj = {}\r\n        tempObj['Name'] = taskName\r\n        tempObj['Description'] = description\r\n        updateTask(tempObj)\r\n    }\r\n\r\n    return (\r\n        <Modal isOpen={modal} toggle={toggle}>\r\n            <ModalHeader toggle={toggle}>Update Task</ModalHeader>\r\n            <ModalBody>\r\n            \r\n                    <div className = \"form-group\">\r\n                        <label>Task Name</label>\r\n                        <input type=\"text\" className = \"form-control\" value = {taskName} onChange = {handleChange} name = \"taskName\"/>\r\n                    </div>\r\n                    <div className = \"form-group\">\r\n                        <label>Description</label>\r\n                        <textarea rows = \"5\" className = \"form-control\" value = {description} onChange = {handleChange} name = \"description\"></textarea>\r\n                    </div>\r\n                \r\n            </ModalBody>\r\n            <ModalFooter>\r\n            <Button color=\"primary\" onClick={handleUpdate}>Update</Button>{' '}\r\n            <Button color=\"secondary\" onClick={toggle}>Cancel</Button>\r\n            </ModalFooter>\r\n      </Modal>\r\n    );\r\n};\r\n\r\nexport default EditTaskPopup;","import React, {useState} from 'react';\r\nimport EditTask from '../modals/EditTask'\r\n\r\nconst Card = ({taskObj, index, deleteTask, updateListArray}) => {\r\n    const [modal, setModal] = useState(false);\r\n\r\n    const colors = [\r\n        {\r\n            primaryColor : \"#5D93E1\",\r\n            secondaryColor : \"#ECF3FC\"\r\n        },\r\n        {\r\n            primaryColor : \"#F9D288\",\r\n            secondaryColor : \"#FEFAF1\"\r\n        },\r\n        {\r\n            primaryColor : \"#5DC250\",\r\n            secondaryColor : \"#F2FAF1\"\r\n        },\r\n        {\r\n            primaryColor : \"#F48687\",\r\n            secondaryColor : \"#FDF1F1\"\r\n        },\r\n        {\r\n            primaryColor : \"#B964F7\",\r\n            secondaryColor : \"#F3F0FD\"\r\n        }\r\n    ]\r\n\r\n    const toggle = () => {\r\n        setModal(!modal);\r\n    }\r\n\r\n    const updateTask = (obj) => {\r\n        updateListArray(obj, index)\r\n    }\r\n\r\n    const handleDelete = () => {\r\n        deleteTask(index)\r\n    }\r\n\r\n    return (\r\n        <div class = \"card-wrapper mr-5\">\r\n            <div class = \"card-top\" style={{\"background-color\": colors[index%5].primaryColor}}></div>\r\n            <div class = \"task-holder\">\r\n                <span class = \"card-header\" style={{\"background-color\": colors[index%5].secondaryColor, \"border-radius\": \"10px\"}}>{taskObj.Name}</span>\r\n                <p className = \"mt-3\">{taskObj.Description}</p>\r\n\r\n                <div style={{\"position\": \"absolute\", \"right\" : \"20px\", \"bottom\" : \"20px\"}}>\r\n                    <i class = \"far fa-edit mr-3\" style={{\"color\" : colors[index%5].primaryColor, \"cursor\" : \"pointer\"}} onClick = {() => setModal(true)}></i>\r\n                    <i class=\"fas fa-trash-alt\" style = {{\"color\" : colors[index%5].primaryColor, \"cursor\" : \"pointer\"}} onClick = {handleDelete}></i>\r\n                </div>\r\n        </div>\r\n        <EditTask modal = {modal} toggle = {toggle} updateTask = {updateTask} taskObj = {taskObj}/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Card;","import React, {useEffect, useState} from 'react';\r\nimport CreateTask from '../modals/CreateTask'\r\nimport Card from './Card';\r\n\r\nconst TodoList = () => {\r\n    const [modal, setModal] = useState(false);\r\n    const [taskList, setTaskList] = useState([])\r\n    \r\n    useEffect(() => {\r\n        let arr = localStorage.getItem(\"taskList\")\r\n       \r\n        if(arr){\r\n            let obj = JSON.parse(arr)\r\n            setTaskList(obj)\r\n        }\r\n    }, [])\r\n\r\n\r\n    const deleteTask = (index) => {\r\n        let tempList = taskList\r\n        tempList.splice(index, 1)\r\n        localStorage.setItem(\"taskList\", JSON.stringify(tempList))\r\n        setTaskList(tempList)\r\n        window.location.reload()\r\n    }\r\n\r\n    const updateListArray = (obj, index) => {\r\n        let tempList = taskList\r\n        tempList[index] = obj\r\n        localStorage.setItem(\"taskList\", JSON.stringify(tempList))\r\n        setTaskList(tempList)\r\n        window.location.reload()\r\n    }\r\n\r\n    const toggle = () => {\r\n        setModal(!modal);\r\n    }\r\n\r\n    const saveTask = (taskObj) => {\r\n        let tempList = taskList\r\n        tempList.push(taskObj)\r\n        localStorage.setItem(\"taskList\", JSON.stringify(tempList))\r\n        setTaskList(taskList)\r\n        setModal(false)\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            <div className = \"header text-center\">\r\n                <h3>Todo List</h3>\r\n                <button className = \"btn btn-primary mt-2\" onClick = {() => setModal(true)} >Create Task</button>\r\n            </div>\r\n            <div className = \"task-container\">\r\n            {taskList && taskList.map((obj , index) => <Card taskObj = {obj} index = {index} deleteTask = {deleteTask} updateListArray = {updateListArray}/> )}\r\n            </div>\r\n            <CreateTask toggle = {toggle} modal = {modal} save = {saveTask}/>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default TodoList;","import logo from './logo.svg';\r\nimport './App.css';\r\nimport TodoList from './components/TodoList'\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nimport 'font-awesome/css/font-awesome.min.css'\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <TodoList />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}