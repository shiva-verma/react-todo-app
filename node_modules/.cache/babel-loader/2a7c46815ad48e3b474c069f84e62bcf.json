{"ast":null,"code":"import _slicedToArray from\"C:/Users/shiv/IdeaProjects/React-todo-list/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import React,{useState}from'react';import{Button,Modal,ModalHeader,ModalBody,ModalFooter}from'reactstrap';var CreateTaskPopup=function CreateTaskPopup(_ref){var modal=_ref.modal,toggle=_ref.toggle,save=_ref.save;var _useState=useState(''),_useState2=_slicedToArray(_useState,2),taskName=_useState2[0],setTaskName=_useState2[1];var _useState3=useState(''),_useState4=_slicedToArray(_useState3,2),description=_useState4[0],setDescription=_useState4[1];var handleChange=function handleChange(e){var _e$target=e.target,name=_e$target.name,value=_e$target.value;if(name===\"taskName\"){setTaskName(value);}else{setDescription(value);}};var handleSave=function handleSave(e){e.preventDefault();var taskObj={};taskObj[\"Name\"]=taskName;taskObj[\"Description\"]=description;save(taskObj);};return/*#__PURE__*/_jsxs(Modal,{isOpen:modal,toggle:toggle,children:[/*#__PURE__*/_jsx(ModalHeader,{toggle:toggle,children:\"Create Task\"}),/*#__PURE__*/_jsxs(ModalBody,{children:[/*#__PURE__*/_jsxs(\"div\",{className:\"form-group\",children:[/*#__PURE__*/_jsx(\"label\",{children:\"Task Name\"}),/*#__PURE__*/_jsx(\"input\",{type:\"text\",className:\"form-control\",value:taskName,onChange:handleChange,name:\"taskName\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"form-group\",children:[/*#__PURE__*/_jsx(\"label\",{children:\"Description\"}),/*#__PURE__*/_jsx(\"textarea\",{rows:\"5\",className:\"form-control\",value:description,onChange:handleChange,name:\"description\"})]})]}),/*#__PURE__*/_jsxs(ModalFooter,{children:[/*#__PURE__*/_jsx(Button,{color:\"primary\",onClick:handleSave,children:\"Create\"}),' ',/*#__PURE__*/_jsx(Button,{color:\"secondary\",onClick:toggle,children:\"Cancel\"})]})]});};export default CreateTaskPopup;","map":{"version":3,"sources":["C:/Users/shiv/IdeaProjects/React-todo-list/src/modals/CreateTask.js"],"names":["React","useState","Button","Modal","ModalHeader","ModalBody","ModalFooter","CreateTaskPopup","modal","toggle","save","taskName","setTaskName","description","setDescription","handleChange","e","target","name","value","handleSave","preventDefault","taskObj"],"mappings":"yPAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,KAAgC,OAAhC,CACA,OAASC,MAAT,CAAiBC,KAAjB,CAAwBC,WAAxB,CAAqCC,SAArC,CAAgDC,WAAhD,KAAmE,YAAnE,CAEA,GAAMC,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,MAA2B,IAAzBC,CAAAA,KAAyB,MAAzBA,KAAyB,CAAlBC,MAAkB,MAAlBA,MAAkB,CAAVC,IAAU,MAAVA,IAAU,eACfT,QAAQ,CAAC,EAAD,CADO,wCACxCU,QADwC,eAC9BC,WAD8B,8BAETX,QAAQ,CAAC,EAAD,CAFC,yCAExCY,WAFwC,eAE3BC,cAF2B,eAI/C,GAAMC,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,CAACC,CAAD,CAAO,eAEFA,CAAC,CAACC,MAFA,CAEjBC,IAFiB,WAEjBA,IAFiB,CAEXC,KAFW,WAEXA,KAFW,CAIxB,GAAGD,IAAI,GAAK,UAAZ,CAAuB,CACnBN,WAAW,CAACO,KAAD,CAAX,CACH,CAFD,IAEK,CACDL,cAAc,CAACK,KAAD,CAAd,CACH,CAGJ,CAXD,CAaA,GAAMC,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,CAACJ,CAAD,CAAO,CACtBA,CAAC,CAACK,cAAF,GACA,GAAIC,CAAAA,OAAO,CAAG,EAAd,CACAA,OAAO,CAAC,MAAD,CAAP,CAAkBX,QAAlB,CACAW,OAAO,CAAC,aAAD,CAAP,CAAyBT,WAAzB,CACAH,IAAI,CAACY,OAAD,CAAJ,CAEH,CAPD,CASA,mBACI,MAAC,KAAD,EAAO,MAAM,CAAEd,KAAf,CAAsB,MAAM,CAAEC,MAA9B,wBACI,KAAC,WAAD,EAAa,MAAM,CAAEA,MAArB,yBADJ,cAEI,MAAC,SAAD,yBAEQ,aAAK,SAAS,CAAG,YAAjB,wBACI,oCADJ,cAEI,cAAO,IAAI,CAAC,MAAZ,CAAmB,SAAS,CAAG,cAA/B,CAA8C,KAAK,CAAIE,QAAvD,CAAiE,QAAQ,CAAII,YAA7E,CAA2F,IAAI,CAAG,UAAlG,EAFJ,GAFR,cAMQ,aAAK,SAAS,CAAG,YAAjB,wBACI,sCADJ,cAEI,iBAAU,IAAI,CAAG,GAAjB,CAAqB,SAAS,CAAG,cAAjC,CAAgD,KAAK,CAAIF,WAAzD,CAAsE,QAAQ,CAAIE,YAAlF,CAAgG,IAAI,CAAG,aAAvG,EAFJ,GANR,GAFJ,cAcI,MAAC,WAAD,yBACA,KAAC,MAAD,EAAQ,KAAK,CAAC,SAAd,CAAwB,OAAO,CAAEK,UAAjC,oBADA,CAC6D,GAD7D,cAEA,KAAC,MAAD,EAAQ,KAAK,CAAC,WAAd,CAA0B,OAAO,CAAEX,MAAnC,oBAFA,GAdJ,GADJ,CAqBH,CA/CD,CAiDA,cAAeF,CAAAA,eAAf","sourcesContent":["import React, { useState } from 'react';\r\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\r\n\r\nconst CreateTaskPopup = ({modal, toggle, save}) => {\r\n    const [taskName, setTaskName] = useState('');\r\n    const [description, setDescription] = useState('');\r\n\r\n    const handleChange = (e) => {\r\n        \r\n        const {name, value} = e.target\r\n\r\n        if(name === \"taskName\"){\r\n            setTaskName(value)\r\n        }else{\r\n            setDescription(value)\r\n        }\r\n\r\n\r\n    }\r\n\r\n    const handleSave = (e) => {\r\n        e.preventDefault()\r\n        let taskObj = {}\r\n        taskObj[\"Name\"] = taskName\r\n        taskObj[\"Description\"] = description\r\n        save(taskObj)\r\n\r\n    }\r\n\r\n    return (\r\n        <Modal isOpen={modal} toggle={toggle}>\r\n            <ModalHeader toggle={toggle}>Create Task</ModalHeader>\r\n            <ModalBody>\r\n            \r\n                    <div className = \"form-group\">\r\n                        <label>Task Name</label>\r\n                        <input type=\"text\" className = \"form-control\" value = {taskName} onChange = {handleChange} name = \"taskName\"/>\r\n                    </div>\r\n                    <div className = \"form-group\">\r\n                        <label>Description</label>\r\n                        <textarea rows = \"5\" className = \"form-control\" value = {description} onChange = {handleChange} name = \"description\"></textarea>\r\n                    </div>\r\n                \r\n            </ModalBody>\r\n            <ModalFooter>\r\n            <Button color=\"primary\" onClick={handleSave}>Create</Button>{' '}\r\n            <Button color=\"secondary\" onClick={toggle}>Cancel</Button>\r\n            </ModalFooter>\r\n      </Modal>\r\n    );\r\n};\r\n\r\nexport default CreateTaskPopup;"]},"metadata":{},"sourceType":"module"}